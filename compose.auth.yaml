name: reverse-proxy

services:
  crowdsec:
    image: crowdsecurity/crowdsec:v1.6.5
    container_name: crowdsec
    restart: unless-stopped
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve"
    volumes:
      - ${LOGS_PATH}:/var/log:ro
      - ${CONFIG_PATH}/Auth/Crowdsec/db:/var/lib/crowdsec/data/
      - ${CONFIG_PATH}/Auth/Crowdsec/config:/etc/crowdsec/

  traefik:
    restart: unless-stopped
    depends_on:
      authentikserver:
        condition: service_healthy
      crowdsec:
        condition: service_started
    container_name: traefik
    # The official v2 Traefik docker image
    image: traefik:v3.3
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
      start_interval: 1s
    command:
      # Enable Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      # Enable Traefik logs
      - "--accesslog"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      # Create entrypoitns
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.websecure.address=:443"
      # Enable proxy protocol
      - "--entryPoints.web.proxyProtocol.trustedIPs=100.0.0.0/8"
      - "--entryPoints.web.forwardedHeaders.trustedIPs=100.0.0.0/8"
      - "--entryPoints.websecure.proxyProtocol.trustedIPs=100.0.0.0/8"
      - "--entryPoints.websecure.forwardedHeaders.trustedIPs=100.0.0.0/8"
      # Enables TLS and manages certificates
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=cloudflare"
      - "--entrypoints.websecure.http.tls.domains[0].main=${PUBLIC_HOSTNAME}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${PUBLIC_HOSTNAME}"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1"
      - "--certificatesResolvers.cloudflare.acme.storage=/cert/acme.json"
      # Allow telemetry
      - "--global.sendAnonymousUsage=true"
      # File provider
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - '--providers.docker.defaultRule=Host(`{{ or (index .Labels "subdomain") (lower .ContainerName)}}.${PUBLIC_HOSTNAME}`)'
      # Plugins
      # ## SABLIER: Dynamically start/stop containers
      # - --experimental.plugins.sablier.modulename=github.com/acouvreur/sablier
      # - --experimental.plugins.sablier.version=v1.8.0-beta.12
      ## CrowdSec:
      - --experimental.plugins.crowdsec.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
      - --experimental.plugins.crowdsec.version=v1.4.1
    environment:
      - TZ=${TIMEZONE}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    ports:
      # The HTTP port
      - target: 80
        published: 80
        mode: host
      # The HTTPS port
      - target: 443
        published: 443
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${LOGS_PATH}/traefik:/var/log/traefik
      - ${CONFIG_PATH}/Auth/Traefik/config:/config
      - ${CONFIG_PATH}/Auth/Traefik/cert:/cert
    labels:
      # Headers middleware
      # - "traefik.http.middlewares.default-headers.headers.stsSeconds=63072000"
      # - "traefik.http.middlewares.default-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.default-headers.headers.contentTypeNosniff=true"

      # CrowdSec plugin
      - "traefik.http.middlewares.crowdsec.plugin.crowdsec.enabled=true"
      - "traefik.http.middlewares.crowdsec.plugin.crowdsec.crowdseclapikey=${CROWDSEC_API_KEY}"

      - "traefik.enable=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.middlewares=default-headers"

  whoami:
    restart: unless-stopped
    container_name: whoami
    image: traefik/whoami:latest
    ports:
      - "1337:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.middlewares=default-headers"

  postgresql:
    image: docker.io/library/postgres:17-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${CONFIG_PATH}/Database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${CONFIG_PATH}/Redis:/data

  authentikserver:
    image: ghcr.io/goauthentik/server:2024.12
    restart: unless-stopped
    command: server
    env_file:
      - .env.authentik
    volumes:
      - ${CONFIG_PATH}/Auth/Authentik/media:/media
      - ${CONFIG_PATH}/Auth/Authentik/custom-templates:/templates
    ports:
      - "9000:9000"
    labels:
      traefik.enable: true
      subdomain: auth
      traefik.http.middlewares.auth.forwardauth.address: http://authentikserver:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.auth.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.auth.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

  authentikworker:
    image: ghcr.io/goauthentik/server:2024.12
    restart: unless-stopped
    command: worker
    env_file:
      - .env.authentik
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_PATH}/Auth/certs:/certs
      - ${CONFIG_PATH}/Auth/Authentik/media:/media
      - ${CONFIG_PATH}/Auth/Authentik/custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

  postfix:
    image: boky/postfix:4.4.0
    container_name: postfix
    restart: unless-stopped
    healthcheck:
      start_interval: 3s
      start_period: 30s
    environment:
      - TZ=${TIMEZONE}
      - RELAYHOST=smtp.gmail.com:587
      - RELAYHOST_USERNAME=${SMTP_USERNAME}
      - RELAYHOST_PASSWORD=${SMTP_PASSWORD}
      - ALLOW_EMPTY_SENDER_DOMAINS=true
    volumes:
      - ${CONFIG_PATH}/Auth/Postfix:/data
